{
  "version": 3,
  "sources": ["../lib/rational_pq.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn Infinity;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = float64ToFloat32(14.026143074035645 + float64ToFloat32(x * float64ToFloat32(43.7473258972168 + float64ToFloat32(x * float64ToFloat32(50.59547424316406 + float64ToFloat32(x * float64ToFloat32(26.90456771850586 + float64ToFloat32(x * float64ToFloat32(6.595765590667725 + float64ToFloat32(x * 0.6007853746414185)))))))))); // eslint-disable-line max-len\n\t\ts2 = float64ToFloat32(0.0 + float64ToFloat32(x * float64ToFloat32(24.0 + float64ToFloat32(x * float64ToFloat32(50.0 + float64ToFloat32(x * float64ToFloat32(35.0 + float64ToFloat32(x * float64ToFloat32(10.0 + float64ToFloat32(x * 1.0)))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = float64ToFloat32( 1.0 / x );\n\t\ts1 = float64ToFloat32(0.6007853746414185 + float64ToFloat32(x * float64ToFloat32(6.595765590667725 + float64ToFloat32(x * float64ToFloat32(26.90456771850586 + float64ToFloat32(x * float64ToFloat32(50.59547424316406 + float64ToFloat32(x * float64ToFloat32(43.7473258972168 + float64ToFloat32(x * 14.026143074035645)))))))))); // eslint-disable-line max-len\n\t\ts2 = float64ToFloat32(1.0 + float64ToFloat32(x * float64ToFloat32(10.0 + float64ToFloat32(x * float64ToFloat32(35.0 + float64ToFloat32(x * float64ToFloat32(50.0 + float64ToFloat32(x * float64ToFloat32(24.0 + float64ToFloat32(x * 0.0)))))))))); // eslint-disable-line max-len\n\t}\n\treturn float64ToFloat32( s1 / s2 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link https://www.boost.org/doc/libs/1_88_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\nvar evalrational = require( './rational_pq.js' );\n\n\n// MAIN //\n\n/**\n* Calculates the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 1.42845618724823`) as a single precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {number} Lanczos sum approximation\n*\n* @example\n* var v = gammaLanczosSumExpGScaledf( 4.0 );\n* // returns ~0.748\n*\n* @example\n* var v = gammaLanczosSumExpGScaledf( -1.5 );\n* // returns ~0.193\n*\n* @example\n* var v = gammaLanczosSumExpGScaledf( -0.5 );\n* // returns ~-0.558\n*\n* @example\n* var v = gammaLanczosSumExpGScaledf( 0.5 );\n* // returns ~1.772\n*\n* @example\n* var v = gammaLanczosSumExpGScaledf( 0.0 );\n* // returns Infinity\n*\n* @example\n* var v = gammaLanczosSumExpGScaledf( NaN );\n* // returns NaN\n*/\nfunction gammaLanczosSumExpGScaledf( x ) {\n\treturn evalrational( f32( x ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gammaLanczosSumExpGScaledf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Calculate the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 1.42845618724823`) as a single precision floating-point number.\n*\n* @module @stdlib/math-base-special-gamma-lanczos-sum-expg-scaledf\n*\n* @example\n* var gammaLanczosSumExpGScaledf = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaledf' );\n*\n* var v = gammaLanczosSumExpGScaledf( 4.0 );\n* // returns ~0.748\n*\n* v = gammaLanczosSumExpGScaledf( -1.5 );\n* // returns ~0.193\n*\n* v = gammaLanczosSumExpGScaledf( -0.5 );\n* // returns ~-0.558\n*\n* v = gammaLanczosSumExpGScaledf( 0.5 );\n* // returns ~1.772\n*\n* v = gammaLanczosSumExpGScaledf( 0.0 );\n* // returns Infinity\n*\n* v = gammaLanczosSumExpGScaledf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAmBzE,SAASC,EAAcC,EAAI,CAC1B,IAAIC,EACAC,EACAC,EACJ,OAAKH,IAAM,EACH,KAEHA,EAAI,EACRC,EAAK,CAACD,EAENC,EAAKD,EAEDC,GAAM,GACVC,EAAKJ,EAAiB,mBAAqBA,EAAiBE,EAAIF,EAAiB,iBAAmBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAI,iBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAClUG,EAAKL,EAAiB,EAAMA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAI,CAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAEjPA,EAAIF,EAAkB,EAAME,CAAE,EAC9BE,EAAKJ,EAAiB,kBAAqBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,kBAAoBA,EAAiBE,EAAIF,EAAiB,iBAAmBA,EAAiBE,EAAI,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAClUG,EAAKL,EAAiB,EAAMA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAIF,EAAiB,GAAOA,EAAiBE,EAAI,CAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAE3OF,EAAkBI,EAAKC,CAAG,EAClC,CAKAN,EAAO,QAAUE,ICpEjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAmCA,IAAIC,EAAM,QAAS,wCAAyC,EACxDC,EAAe,IAmCnB,SAASC,EAA4BC,EAAI,CACxC,OAAOF,EAAcD,EAAKG,CAAE,CAAE,CAC/B,CAKAJ,EAAO,QAAUG,IC7BjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_rational_pq", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalrational", "x", "ax", "s1", "s2", "require_main", "__commonJSMin", "exports", "module", "f32", "evalrational", "gammaLanczosSumExpGScaledf", "x", "main"]
}
